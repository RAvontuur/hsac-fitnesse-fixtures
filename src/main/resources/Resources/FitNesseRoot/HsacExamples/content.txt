!contents -R2 -g -p -f -h

The hsac-fitnesse-fixtures project contains some Fitnesse fixture (base) classes and a baseline Fitnesse installation.
>SymbolSamples shows example usage of the Wiki symbols added by hsac-fitnesse-plugin. The fixtures are used in the children of >SlimTests.

The fixtures provided aim to assist in testing (SOAP) web services and web applications (using Selenium) minimizing the amount of (custom) Java code needed to define tests. (To use the add the lines specified [[below][HsacExamples#classpath]] to your root Wiki page.)

!2 Baseline installation features

The baseline Fitnesse installation offers the following features:
 1. Ability to easily create a standalone (no JDK or Maven required) Fitnesse environment.
 2. Run Fitnesse tests on a build server, reporting the results in both JUnit XML format and HTML.
 3. Fitnesse installation for fixture developers containing:
  * the fixture base classes (and Selenium drivers from Chrome and Internet Explorer),
  * Maven classpath plugin (such that tests can use all dependencies from pom.xml),
  * HSAC's fitnesse-plugin to add additional Wiki features (random values, calculating relative dates, Slim scenarios without need to specify all parameters),
  * easy fixture debugging,

!3 1. Create standalone Fitnesse installation
To create a standalone installation execute {{{ mvn clean test dependency:copy-dependencies }}}
The standalone installation is present in the wiki directory (and can be distributed by just copying this directory).
This standalone installation can be started using {{{ java -jar fitnesse-standalone.jar }}} from the wiki directory.


!3 2. Run on build server
To run the tests on a build server have the build server checkout the project and execute {{{ mvn clean test-compile failsafe:integration-test }}}
The result in JUnit XML results can be found in: target/failsafe-reports (most build servers will pick these up automatically)
The HTML results can be found in: target/fitnesse-results/<SuiteName>.html

The Fitnesse suite to run can be specified by changing the value of the !style_code[suiteName] variable in !style_code[nl.hsac.fitnesse.fixture.FixtureDebugTest],
or (preferably) by adding an environment variable, called !style_code[fitnesseSuiteToRun], specifying the suite to run to the build server's mvn execution.


!3 3. Fixture developer installation
Import this project in your favorite Java IDE (with Maven support).

To start Fitnesse: have the IDE execute {{{ mvn compile exec:exec }}}The port used by Fitnesse can be controlled by changing the !style_code[fitnesse.port] property's value in pom.xml.
Fitnesse will be available at !- http://localhost:&lt;fitnesse.port>/ -!

To debug a fixture used in a Fitnesse page: change !style_code[suiteName] variable to contain page name in !style_code[nl.hsac.fitnesse.fixture.FixtureDebugTest], then just debug this test '''(with 'wiki' directory as working directory)'''.

!anchor classpath

!4 Making fixtures accessible
To ensure the fixtures (and all dependencies as specified in the project's pom.xml) are available, add the following lines to the root Wiki page containing the tests.
{{{
!path fixtures
!path fixtures/*.jar
!pomFile ../pom.xml@compile
}}} The first two will ensure all classes are accessible when working standalone, the last will be used by Java developers changing fixtures (with a Maven installation).

!*> Class path for these examples
The location when working standalone:
!path fixtures
!path *.jar

When developing and changing the fixtures, we will work based on the pom.xml:
!pomFile ../pom.xml@compile
*!